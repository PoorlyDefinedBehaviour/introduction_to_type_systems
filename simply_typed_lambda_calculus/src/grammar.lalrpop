#![warn(unknown_lints)]
#![allow(clippy::all)] 
use crate::ast::{Term, Type};
use std::str::FromStr;

grammar;

identifier = r"[[:alpha:]]";

pub Term: Term = {
  #[precedence(level="1")]
  "(" <t: Term> ")" => t,

  #[precedence(level="1")]
  identifier => Term::Var(String::from(<>)),

  #[precedence(level="1")]
  Int => Term::Int(<>),

  #[precedence(level="2")]
  "(" <f: Term> <arg: Term> ")" => Term::App { function: Box::new(f), arg: Box::new(arg) },

  #[precedence(level="3")]
  #[assoc(side="left")]
  <a: Term> "+" <b: Term> => Term::Add(Box::new(a), Box::new(b)),
  
  #[precedence(level="4")]
  #[assoc(side="right")]
  "Î»" <var: identifier> ":" <param_type: Type> "." <body: Term> => 
    Term::Abs {
      param: String::from(var), 
      param_type, 
      body: Box::new(body) 
    },
}

Type: Type = {
  "Bool" => Type::Bool,
  "Int" => Type::Int,
}

Int: i32 = <s: r"[0-9]+"> => i32::from_str(s).unwrap();
  
